#!/usr/bin/python2
import praw
import os
import signal
import json
import webbrowser
import gtk
from urllib2 import Request, urlopen, URLError
import appindicator 
import pynotify
import glib

#KEYWORDS
APPINDICATOR_ID = 'reddit-indicator'
PYNOTIFY_ID = 'reddit-indicator'
LIMIT = 10
ONE_MINUTE = 1000*60
ONE_HOUR = 60
DURATION = 1
REFRESH_DURATION = ONE_MINUTE*ONE_HOUR*DURATION #Feed will get updated every hour as default
SPACE = ' '
DASH = '-'
POINTS = 'Points'

titles = []
points = []
urls = []

news = ['?']*LIMIT
item = ['?']*LIMIT

def main():
    indicator = appindicator.Indicator(APPINDICATOR_ID, os.path.abspath('/usr/share/icons/reddit.png'), appindicator.CATEGORY_COMMUNICATIONS)
    indicator.set_status(appindicator.STATUS_ACTIVE)
    indicator.set_menu(build_menu())
    pynotify.init(APPINDICATOR_ID)
    gtk.main()
    timeout = glib.timeout_add_seconds(60, update_timeout)

def build_menu():
    menu = gtk.Menu()

    get_data()

    global LIMIT
    print 'In build_menu() method and value of limit is - ' + str(LIMIT)
    news = ['?']*LIMIT
    item = ['?']*LIMIT
    
    for i in range(0,LIMIT):
        news[i] = str(titles[i]) + SPACE #+ DASH + SPACE + str(points[i]) + SPACE + POINTS
    
    for i in range(0,LIMIT):    
        item[i] = gtk.MenuItem(news[i])
        item[i].connect('activate', open_url,urls[i])
        menu.append(item[i])

    separator = gtk.SeparatorMenuItem()
    menu.append(separator)

    item_refresh_control = gtk.MenuItem("Adjust refresh time")
    menu_refresh_control = gtk.Menu()
    menu_refresh_control_items = []
    group = [None]
    time_interval_list = [1, 2, 3, 4]
    for i in time_interval_list:
        subitem = gtk.RadioMenuItem(group[0], str(i) + " hours")
        subitem.connect('activate', update_time_interval)
        menu_refresh_control.append(subitem)
        menu_refresh_control_items.append(subitem)
        group = subitem.get_group()
    item_refresh_control.set_submenu(menu_refresh_control)
    menu.append(item_refresh_control)

    separator2 = gtk.SeparatorMenuItem()
    menu.append(separator2)

    item_refresh = gtk.MenuItem('Refresh')
    item_refresh.connect('activate', refresh)
    menu.append(item_refresh)

    item_quit = gtk.MenuItem('Quit')
    item_quit.connect('activate', quit)
    menu.append(item_quit)
            
    menu.show_all()

    global REFRESH_DURATION
    timeout = glib.timeout_add_seconds(REFRESH_DURATION, update_timeout)
    
    return menu

def update_time_interval(source):
    new_update_interval = int(source.get_label().split()[0])
    global REFRESH_DURATION
    global DURATION
    DURATION = new_update_interval
    REFRESH_DURATION = ONE_MINUTE*ONE_HOUR*DURATION
    show_notification(None, "Settings updated!", "Successfully changed the refresh duration settings.")

def quit(widget):
    show_notification(None, "Quitting", "Exiting from reddit-indicator.")
    gtk.main_quit()

def get_data():
    r = praw.Reddit(user_agent='Test Script by /u/bboe')
    submissions = r.get_subreddit('all').get_top(limit=10)
    for x in submissions :
        titles.append(str(x).encode('utf-8'))
        points.append(x.score)
        urls.append(x.url)

def open_url(widget,url):
    if url is not None:
        webbrowser.open(url)
    else:
        show_notification(None, "Error." , "Cannot open URL in browser.")

def show_notification(self, title="Title", msg="Message", timeout=1000):
		notification = pynotify.Notification(title, msg)
		notification.set_timeout(timeout)
		notification.show()

def update_timeout():
    print 'in update_timeout function'
    refresh(widget)
    return True

def refresh(widget):
    titles[:] = []
    points[:] = []  
    urls[:] = []

    build_menu()
    show_notification(None,"Reddit Widget updated!", "Click on the widget to view updated news feed.")


if __name__ == "__main__" :
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    #show_notification(None, "Please Wait." , "Hacker News indicator is being setup for you.")
    main()

